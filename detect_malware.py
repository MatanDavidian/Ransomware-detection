import pandas
import re
import fasttext.util
import numpy as np
from keras.models import Sequential, load_model
from keras.layers import Dense, Conv2D, Reshape, LSTM
from tkinter import Tk, Button, mainloop, Label, HORIZONTAL, DISABLED
from tkinter.ttk import Progressbar
from threading import Thread
from run_recording import recording
from settings import *
from preprocessing_funcs import *

csv_path = start_path + r"\ProcessMonitor\rec_syscalls.csv"
model_path = start_path + r"\saved_models\CNN_MAX_P_with_norm"
print("load saved_models start")
SHIELD_MODEL = load_model(model_path)
ft = fasttext.load_model(start_path + r'\cc.en.300.bin')
print("load saved_models end")
# create GUI main window
master = Tk()
# progress bar
progress = Progressbar(master, orient=HORIZONTAL, length=200, mode='determinate')
progress.place(x=100, y=70)
Progressbar_value = 0
progress['value'] = Progressbar_value

L = Label(master)
L.pack_forget()

L_proc_name = Label(master, text="", bg="black", fg="red")
L_proc_name.place(x=10, y=110)

L_op = Label(master, text="", bg="black", fg="white")
L_op.place(x=0, y=10)
# create button
B = Button(master, text='Scan')


def GUI():
    # give main window a size and color
    master.geometry("400x150")
    master.configure(background='black')
    # add title to window
    master.title("Malware scan")
    B["command"] = run_on_thread
    B.place(x=100, y=35, width=200, height=30)
    Button(master, text='Exit', command=exit).place(x=350, y=120, width=40, height=25)
    # show window
    mainloop()


def run_on_thread():
    B['state'] = DISABLED
    L_proc_name["text"] = ""
    L_op["text"] = "start scanning"
    update_progress_bar(0)
    x = Thread(target=run)
    x.start()


def choose_process(df, p_num):
    print(df["Process Name"].value_counts().keys())
    name = df["Process Name"].value_counts().keys()[p_num]
    # if name == "Procmon.exe":
    #     name = df["Process Name"].value_counts().keys()[1]
    print("chosen: "+str(name))
    return df[df["Process Name"] == name], name
    # return df.loc[[df["Process Name"] == name]]


def preprocessing_1():
    details = ["FileAttributes:", "EndOfFile:", "NumberOfLinks:", "DeletePending:", "DesiredAccess:", "Disposition:",
               "Options:", "Attributes:", "ShareMode:", "AllocationSize:", "Impersonating:", "Directory:",
               "IndexNumber:",
               "Access:", "Mode:", "AlignmentRequirement:", "Exclusive:", "FailImmediately:", "OpenResult:",
               "SyncType:",
               "PageProtection:", "Control:", "ImageBase:", "ImageSize:", "ExitStatus:", "PrivateBytes:",
               "PeakPrivateBytes:",
               "WorkingSet:", "Filter:", "PeakWorkingSet:", "ParentPID:", "Commandline:", "Currentdirectory:",
               "Offset:", "Length:",
               "Priority:", "GrantedAccess:", "Index:", "Name:", "Type:", "Data:", "Query:", "SubKeys:", "Values:",
               "HandleTags:",
               "KeySetInformationClass:", "I/OFlags:", "FileSystemAttributes:", "MaximumComponentNameLength:",
               "FileSystemName:",
               "0:00", "1:00", "2:00", "FileInformationClass:"]
    c = ["Process Name", "Operation", "Duration", "Result", "Detail"] + details
    csv_input = pandas.read_csv(csv_path, engine='python')
    df = pandas.DataFrame(csv_input).tail(syscalls_collected)
    # depend on process monitor version
    for c_num in range(len(df.columns)):
        if "Process Name" in df.columns[c_num]:
            df.rename(columns={df.columns[c_num]: "Process Name"}, inplace=True)
    df = pandas.DataFrame(df, columns=c, copy=False)
    print(df)
    update_progress_bar(20)
    df = separate_detail_column(df, details, "detect")
    update_progress_bar(35)
    df, numeric_c = norm_data(df)
    return df, numeric_c


def preprocessing_2(df, p_num, numeric_c):
    df, p_name = choose_process(df, p_num)
    print(len(df.index))
    if len(df.index) > syscalls_to_check:
        df = df.tail(syscalls_to_check)
    elif len(df.index) < 1800:
        return 0, p_name
    print(len(df.index))
    L_proc_name["text"] = "process in checking:\n " + p_name
    update_progress_bar(40)
    df = W2v(df.loc[:, df.columns != "Process Name"], numeric_c)
    update_progress_bar(65)
    x = make_windows(df.loc[:, df.columns != "Process Name"], WINDOW, SKIP, "detect")
    update_progress_bar(90)
    return x, p_name


def predict(x, p_name):
    update_progress_bar(95)
    y_new = SHIELD_MODEL.predict(x)
    virus_num = 0
    mal_flag = 0
    for i in y_new:
        if i > 0.7:
            virus_num += 1
    print("res: "+ str(virus_num / len(y_new)) )
    if virus_num / len(y_new) > 0.62:
        print("ALERT: RANSOMWARE MALWARE IS RUNNING ON YOUR COMPUTER!")
        L["text"] = 'Warning!!\nMalware found.'
        L["bg"] = "red"
        mal_flag = 1
    else:
        print("benign process")
        L["text"] = p_name + ': Benign process'
        L["bg"] = "green"
    '''
    elif virus_num / len(y_new) > 0.4:
        print("we need to check your computer again")
        L["text"] = 'Another scan is needed.'
        L["bg"] = "yellow"
    '''
    L.place(x=115, y=90)
    L.pack()
    update_progress_bar(100)
    return mal_flag


def update_progress_bar(value):
    global Progressbar_value
    Progressbar_value = value
    progress['value'] = Progressbar_value
    master.update_idletasks()


def run():
    L_op["text"] = "Recording system calls"
    recording()
    update_progress_bar(15)
    L_op["text"] = "Preprocessing"
    df, numeric_c = preprocessing_1()
    p_number = len(df["Process Name"].value_counts().keys())
    res = 0
    for p in range(p_number):
        x, p_name = preprocessing_2(df, p, numeric_c)
        if isinstance(x, int):
            break
        L_op["text"] = "Predict"
        res = predict(x, p_name)
        if res == 1:
            break
    if res == 0:
        print("Your computer is secure.")
        L["text"] = 'Your computer is secure.'
        L["bg"] = "green"
    L_op["text"] = "Finished"
    B['state'] = "normal"


def main():
    GUI()


main()
