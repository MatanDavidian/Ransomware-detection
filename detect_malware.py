import pandas
import re
import fasttext.util
import numpy as np
from keras.models import Sequential, load_model
from keras.layers import Dense, Conv2D, Reshape, LSTM
from tkinter import Tk, Button, mainloop, Label, HORIZONTAL, DISABLED
from tkinter.ttk import Progressbar
from threading import Thread
from run_recording import recording
from settings import *
csv_path = start_path + r"\ProcessMonitor\rec_syscalls.csv"
model_path = start_path + r"\models\CNN_MAX_P_with_norm"
print("load models start")
SHIELD_MODEL = load_model(model_path)
ft = fasttext.load_model(start_path + r'\cc.en.300.bin')
print("load models end")
# columns that contains only numeric value
numeric_c = []
# create GUI main window
master = Tk()
# progress bar
progress = Progressbar(master, orient=HORIZONTAL, length=200, mode='determinate')
progress.place(x=100, y=70)
Progressbar_value = 0
progress['value'] = Progressbar_value

L = Label(master)
L.pack_forget()

L_proc_name = Label(master, text="", bg="black", fg="red")
L_proc_name.place(x=10, y=110)

L_op = Label(master, text="", bg="black", fg="white")
L_op.place(x=0, y=10)
# create button
B = Button(master, text='Scan')


def GUI():
    # give main window a size and color
    master.geometry("400x150")
    master.configure(background='black')
    # add title to window
    master.title("Malware scan")
    B["command"] = run_on_thread
    B.place(x=100, y=35, width=200, height=30)
    Button(master, text='Exit', command=exit).place(x=350, y=120, width=40, height=25)
    # show window
    mainloop()


def run_on_thread():
    B['state'] = DISABLED
    L_proc_name["text"] = ""
    L_op["text"] = "start scanning"
    update_progress_bar(0)
    x = Thread(target=run)
    x.start()


def to_number(s):
    try:
        f = float(s)
        return True, f
    except ValueError:
        try:
            i = int(s, 0)
            return True, i
        except ValueError:
            return False, s


def separate_detail_column(df, details):
    for col_name in df.columns:
        df[col_name] = df[col_name].astype(str)
    i = 0
    for index, l in df.iterrows():
        i += 1
        if i % 10000 == 0:
            print(index)
        op = (l["Operation"]).replace("Reg", "Registry")
        op = re.sub('([A-Z])', r' \1', op)[1:]
        df.at[index, "Operation"] = op

        if pandas.notnull(l["Detail"]):
            rowDetail = l["Detail"]
            first_arg = rowDetail.find(':')
            detailsList = re.findall(',[^,]*?:', rowDetail)
            # TODO DeviceIoControl has only 1 arg, with :' '
            # all start indexes
            start_end_index = list(map(lambda x: [x[2:], rowDetail.find(x[2:])], detailsList))
            # add first attribute
            start_end_index.insert(0, [rowDetail[:first_arg + 1], 0])
            # add last indexes
            for x in start_end_index:
                x.append(x[1] + len(x[0]))
            # print(start_end_index)
            # insert args in separate columns
            for x in range(len(start_end_index) - 1):
                if start_end_index[x][0] in details:
                    value = (rowDetail[start_end_index[x][2]+1:start_end_index[x + 1][1] - 2]).replace(',', '')
                    ret_val = to_number(value)
                    value = ret_val[1]
                    # separate connected words
                    if not ret_val[0] and len(value) > 4:
                        space_sum = sum(1 for c in value if c == ' ')
                        if space_sum == 0 and value[0].isupper() and value[1].islower():
                            # print(value)
                            upcase_sum = sum(1 for c in value if c.isupper())
                            lowercase_sum = sum(1 for c in value if c.islower())
                            if upcase_sum > 1 and lowercase_sum > 2:
                                #print(value)
                                value = re.sub('([A-Z])', r' \1', value)[1:]
                                #print(value)
                    df.at[index, start_end_index[x][0]] = value
            if len(start_end_index) != 0 and start_end_index[-1][0] in details:
                value = (rowDetail[start_end_index[-1][2]+1:]).replace(',', '')
                value = to_number(value)[1]
                #print(value)
                df.at[index, start_end_index[-1][0]] = value
    print("end separate detail column")

    # df.iloc[:, -1] = '0'
    del df["Detail"]
    return df


def choose_process(df, p_num):
    print(df["Process Name"].value_counts().keys())
    name = df["Process Name"].value_counts().keys()[p_num]
    # if name == "Procmon.exe":
    #     name = df["Process Name"].value_counts().keys()[1]
    print("chosen: "+str(name))
    return df[df["Process Name"] == name], name
    # return df.loc[[df["Process Name"] == name]]


def norm_data(df):
    global numeric_c
    for c in numeric_c:
        df[c] = df[c].replace(['nan', 'n/a'], 0, regex=True)
    for c in numeric_c:
        try:
            df[c] = pandas.to_numeric(df[c])
            print(c)
            min_c = df[c].min()
            print(df[c].max() - min_c)
            df[c] = np.float32((df[c] - min_c) / (df[c].max() - min_c))
            numeric_c.append(c)
        except:
            pass
    print("end normalized")
    return df


def ret_vec(value):
    vec = re.split(',| |_|-', value)
    vec = [x for x in vec if x]
    if vec:
        vec300 = list(map(lambda x: ft.get_word_vector(x), vec))
        meanVec = np.mean(vec300, axis=0)
        return meanVec
    return [0] * 300


def W2v(df):
    global Progressbar_value
    for col_name in df.columns:
        df[col_name] = df[col_name].astype(str)
    empty_list = [0] * 299
    t_empty_list = [0] * 300
    for index, l in df.iterrows():
        for col_name in df.columns:
            value = l[col_name]
            if value in ["nan", "0.0"]:

                df.at[index, col_name] = t_empty_list
            elif col_name not in numeric_c:
                df.at[index, col_name] = ret_vec(value)
            else:
                df.at[index, col_name] = [df.at[index, col_name]] + empty_list
        if index % 2000 == 0:
            print(f"index: {index}")
            Progressbar_value += 2
            update_progress_bar(Progressbar_value)
    return df


# https://towardsdatascience.com/fast-and-robust-sliding-window-vectorization-with-numpy-3ad950ed62f5
def make_windows(df, WINDOW, SKIP):
    print("start make windows")

    def indexing(df):
        r_num = len(df.index)
        X = df.values.tolist()
        X = np.asarray(X, dtype="float32")

        num_of_windows = r_num // SKIP - WINDOW // SKIP - 1
        indexer = np.arange(WINDOW)[None, :] + SKIP * np.arange(num_of_windows)[:, None]

        X = X[indexer]
        return X
    X = indexing(df)
    print(f"X1.shape[0] = {X.shape[0]}")

    print("end make windows")
    return X


def CNN_RNN(shape):
    WINDOW, NUM_PARAM, PARAM_LEN = shape[1], shape[2], shape[3]
    model = Sequential()
    model.add(Conv2D(filters=32, kernel_size=3, activation="relu", input_shape=(WINDOW, NUM_PARAM, PARAM_LEN)))
    model.add(Reshape((WINDOW - 2, (NUM_PARAM - 2) * 32)))
    model.add(LSTM(WINDOW - 2, activation="tanh", return_sequences=False))
    model.add(Dense(1, activation='sigmoid'))
    model.summary()
    print("model build end")
    # compile the keras model
    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
    print("model compile end")
    return model


def preprocessing_1():
    details = ["FileAttributes:", "EndOfFile:", "NumberOfLinks:", "DeletePending:", "DesiredAccess:", "Disposition:",
               "Options:", "Attributes:", "ShareMode:", "AllocationSize:", "Impersonating:", "Directory:",
               "IndexNumber:",
               "Access:", "Mode:", "AlignmentRequirement:", "Exclusive:", "FailImmediately:", "OpenResult:",
               "SyncType:",
               "PageProtection:", "Control:", "ImageBase:", "ImageSize:", "ExitStatus:", "PrivateBytes:",
               "PeakPrivateBytes:",
               "WorkingSet:", "Filter:", "PeakWorkingSet:", "ParentPID:", "Commandline:", "Currentdirectory:",
               "Offset:", "Length:",
               "Priority:", "GrantedAccess:", "Index:", "Name:", "Type:", "Data:", "Query:", "SubKeys:", "Values:",
               "HandleTags:",
               "KeySetInformationClass:", "I/OFlags:", "FileSystemAttributes:", "MaximumComponentNameLength:",
               "FileSystemName:",
               "0:00", "1:00", "2:00", "FileInformationClass:"]
    c = ["Process Name", "Operation", "Duration", "Result", "Detail"] + details
    csv_input = pandas.read_csv(csv_path, engine='python')
    df = pandas.DataFrame(csv_input).tail(syscalls_collected)
    df.rename(columns={df.columns[0]: "Process Name"}, inplace=True)
    df = pandas.DataFrame(df, columns=c)
    update_progress_bar(20)
    df = separate_detail_column(df, details)
    update_progress_bar(35)
    df = norm_data(df)
    return df


def preprocessing_2(df, p_num):
    df, p_name = choose_process(df, p_num)
    print(len(df.index))
    if len(df.index) > syscalls_to_check:
        df = df.tail(syscalls_to_check)
    elif len(df.index) < 1800:
        return 0
    print(len(df.index))
    L_proc_name["text"] = "process in checking:\n " + p_name
    update_progress_bar(40)
    df = W2v(df.loc[:, df.columns != "Process Name"])
    update_progress_bar(65)
    x = make_windows(df.loc[:, df.columns != "Process Name"], WINDOW, SKIP)
    update_progress_bar(90)
    return x, p_name


def predict(x, p_name):
    update_progress_bar(95)
    y_new = SHIELD_MODEL.predict(x)
    virus_num = 0
    mal_flag = 0
    for i in y_new:
        if i > 0.55:
            virus_num += 1
    print("res: "+ str(virus_num / len(y_new)) )
    if virus_num / len(y_new) > 0.60:
        print("ALERT: RANSOMWARE MALWARE IS RUNNING ON YOUR COMPUTER!")
        L["text"] = 'Warning!!\nMalware found.'
        L["bg"] = "red"
        mal_flag = 1
    else:
        print("benign process")
        L["text"] = p_name + ': Benign process'
        L["bg"] = "green"
    '''
    elif virus_num / len(y_new) > 0.4:
        print("we need to check your computer again")
        L["text"] = 'Another scan is needed.'
        L["bg"] = "yellow"
    '''
    L.place(x=115, y=90)
    L.pack()
    update_progress_bar(100)
    return mal_flag


def update_progress_bar(value):
    global Progressbar_value
    Progressbar_value = value
    progress['value'] = Progressbar_value
    master.update_idletasks()


def run():
    L_op["text"] = "Recording system calls"
    recording()
    update_progress_bar(15)
    L_op["text"] = "Preprocessing"
    df = preprocessing_1()
    p_number = len(df["Process Name"].value_counts().keys())
    res = 0
    for p in range(p_number):
        x, p_name = preprocessing_2(df, p)
        if isinstance(x, int):
            break
        L_op["text"] = "Predict"
        res = predict(x, p_name)
        if res == 1:
            break
    if res == 0:
        print("Your computer is secure.")
        L["text"] = 'Your computer is secure.'
        L["bg"] = "green"
    L_op["text"] = "Finished"
    B['state'] = "normal"


def main():
    GUI()


main()
